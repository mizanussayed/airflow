# Production Docker Compose Configuration for Apache Airflow 3.0.0
# Updated with working standalone configuration and latest best practices

# Common configuration for Airflow services
x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    AIRFLOW_UID: ${AIRFLOW_UID}
    AIRFLOW__CORE__PARALLELISM: ${AIRFLOW__CORE__PARALLELISM}
    AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: ${AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG}
    AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: ${AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG}
    AIRFLOW__LOGGING__LOGGING_LEVEL: ${AIRFLOW__LOGGING__LOGGING_LEVEL}
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: ${AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT}
    AIRFLOW__CORE__DEFAULT_TASK_RETRIES: ${AIRFLOW__CORE__DEFAULT_TASK_RETRIES}
    AIRFLOW__CELERY__WORKER_CONCURRENCY: ${AIRFLOW__CELERY__WORKER_CONCURRENCY}
    AIRFLOW__CELERY__WORKER_PREFETCH_MULTIPLIER: ${AIRFLOW__CELERY__WORKER_PREFETCH_MULTIPLIER}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
  networks:
    - airflow-network
  depends_on:
    postgres:
      condition: service_healthy
  restart: unless-stopped

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    restart: unless-stopped
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
    networks:
      - airflow-network

  # Database Migration and Initialization
  airflow-init:
    <<: *airflow-common
    restart: "no"
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    user: "0:0"
    command: >
      bash -c "
        airflow db migrate &&
        echo 'Database migration completed. Please create admin user manually via UI.'
      "

  # Airflow Web Server - Production-ready single service (recommended for single-machine deployments)
  web-server:
    <<: *airflow-common
    container_name: web-server
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      <<: *airflow-common-env
      AIRFLOW__WEBSERVER__WORKERS: 2
      AIRFLOW__WEBSERVER__WORKER_TIMEOUT: 120
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/api/v2/monitor/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3'
    command: standalone
    depends_on:
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:

networks:
  airflow-network:
    driver: bridge